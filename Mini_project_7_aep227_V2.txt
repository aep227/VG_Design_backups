/*
    Author: Addison Powell
    Date: November 6, 2019
    Comments: A remake of Project 3 using a* pathfinding for the enemies.
              The scale is reduced down to a single screen and the maze 
              is different. Power ups are also removed.
              
        Author's Note:      
        Performance really suffers for some reason. Even at pathfinding updates every 250 frames,
        the enemies will occasionally glitch out and stop moving for a while, presumably due to the
        code slowing down. Increasing the delay further seems to have less issues, but each enemy
        will go to the increasingly old position and wait for a long time before being updated again.
        Not really sure what to do about this, and I don't have the time to debug it.

*/

var walls = [];
var chips = [];
var collectibles = 0;
var keyArray = [];
var custom_images = []; //Wall = 0, collectable = 1, enemy = 2, PC = 3
var screen_state = 0;
var f = createFont("Consolas");
textFont(f, 36);
var fade_counter = 0;
var tank1_timer = 0;
var tank2_timer = 40;

var keyPressed = function() {
    keyArray[keyCode] = 1;
};

var keyReleased = function() {
    keyArray[keyCode] = 0;
};

var tileMap = [
        "wwwwwwwwwwwwwwwwwwww",
        "w     w            w",
        "w     w c          w",
        "w     wwww c www   w",
        "w     wwww   www   w",
        "w  c  w        w c w",
        "w  c  w        w c w",
        "w        wwww  w c w",
        "www      wwwwc w c w",
        "wwww  c  wwww  w c w",
        "wwww  c  wwww    c w",
        "wwwww     c      c w",
        "wwwww          w c w",
        "wwwwwwww  ww   w c w",
        "w   w     ww  www  w",
        "w c w  cc ww   w   w",
        "w c w  cc ww   w   w",
        "w                 cw",
        "w                ccw",
        "wwwwwwwwwwwwwwwwwwww",];
        
        var init_custom_graphics = function()
{
    //Custom wall graphic
    fill(0, 120, 0);
    noStroke();
    rect(0, 0, 400, 400);
    fill(100, 200, 100);
    rect(60, 0, 20, 40);
    rect(100, 0, 20, 60);
    rect(140, 0, 20, 80);
    rect(180, 0, 20, 100);
    rect(220, 0, 20, 120);
    rect(260, 0, 20, 240);
    rect(300, 0, 20, 160);
    rect(340, 0, 20, 80);
    rect(0, 60, 40, 20);
    rect(0, 100, 60, 20);
    rect(0, 140, 80, 20);
    rect(0, 180, 100, 20);
    rect(0, 220, 280, 20);
    rect(40, 40, 20, 20);
    rect(60, 80, 20, 20);
    rect(80, 60, 20, 20);
    rect(80, 120, 20, 20);
    rect(100, 100, 20, 20);
    rect(120, 80, 20, 20);
    rect(160, 100, 20, 20);
    rect(140, 120, 20, 20);
    rect(120, 140, 20, 20);
    rect(100, 160, 20, 20);
    rect(140, 180, 20, 220);
    rect(160, 160, 20, 20);
    rect(180, 140, 20, 20);
    rect(200, 120, 20, 20);
    rect(300, 140, 100, 20);
    rect(300, 100, 100, 20);
    rect(340, 60, 60, 20);
    rect(300, 180, 100, 20);
    rect(300, 180, 20, 80);
    rect(340, 220, 60, 20);
    rect(340, 220, 20, 180);
    rect(60, 220, 20, 180);
    rect(100, 220, 20, 180);
    rect(200, 220, 20, 60);
    rect(180, 360, 20, 40);
    rect(220, 360, 20, 40);
    rect(300, 360, 20, 40);
    rect(280, 340, 20, 20);
    rect(260, 320, 20, 20);
    rect(240, 300, 20, 20);
    rect(220, 280, 20, 20);
    rect(280, 260, 20, 20);
    rect(260, 280, 20, 20);
    rect(220, 320, 20, 20);
    rect(200, 340, 20, 20);
    custom_images.push(get(0,0,400,400));
    
    //Custom chip (collectable) graphic
    background(0, 0, 0, 0);
    noStroke();
    //Center chip
    fill(80, 80, 80);
    rect(43.5, 43.5, 300, 300);
    fill(150, 150, 150);
    rect(43.5, 323.5, 300, 20);
    fill(255, 200, 0);
    rect(83.5, 123.5, 20, 120);
    rect(163.5, 123.5, 20, 120);
    rect(83.5, 163.5, 80, 20);
    rect(103.5, 103.5, 60, 20);
    rect(243.5, 123.5, 20, 120);
    rect(203.5, 103.5, 100, 20);
    rect(203.5, 223.5, 100, 20);
    //Top-Top Flanges
    fill(255, 80, 0);
    rect(63.5, 3.5, 20, 20);
    rect(103.5, 3.5, 20, 20);
    rect(143.5, 3.5, 20, 20);
    rect(183.5, 3.5, 20, 20);
    rect(223.5, 3.5, 20, 20);
    rect(263.5, 3.5, 20, 20);
    rect(303.5, 3.5, 20, 20);
    //Bot-Top Flanges
    fill(255, 150, 0);
    rect(63.5, 23.5, 20, 20);
    rect(103.5, 23.5, 20, 20);
    rect(143.5, 23.5, 20, 20);
    rect(183.5, 23.5, 20, 20);
    rect(223.5, 23.5, 20, 20);
    rect(263.5, 23.5, 20, 20);
    rect(303.5, 23.5, 20, 20);
    //Top-Bot Flanges
    fill(255, 150, 0);
    rect(63.5, 343.5, 20, 20);
    rect(103.5, 343.5, 20, 20);
    rect(143.5, 343.5, 20, 20);
    rect(183.5, 343.5, 20, 20);
    rect(223.5, 343.5, 20, 20);
    rect(263.5, 343.5, 20, 20);
    rect(303.5, 343.5, 20, 20);
    //Bot-Bot Flanges
    fill(255, 190, 0);
    rect(63.5, 363.5, 20, 20);
    rect(103.5, 363.5, 20, 20);
    rect(143.5, 363.5, 20, 20);
    rect(183.5, 363.5, 20, 20);
    rect(223.5, 363.5, 20, 20);
    rect(263.5, 363.5, 20, 20);
    rect(303.5, 363.5, 20, 20);
    //Left-Left Flanges
    fill(255, 80, 0);
    rect(3.5, 63.5, 20, 20);
    rect(3.5, 103.5, 20, 20);
    rect(3.5, 143.5, 20, 20);
    rect(3.5, 183.5, 20, 20);
    rect(3.5, 223.5, 20, 20);
    rect(3.5, 263.5, 20, 20);
    rect(3.5, 303.5, 20, 20);
    //Right-Left Flanges
    fill(255, 150, 0);
    rect(23.5, 63.5, 20, 20);
    rect(23.5, 103.5, 20, 20);
    rect(23.5, 143.5, 20, 20);
    rect(23.5, 183.5, 20, 20);
    rect(23.5, 223.5, 20, 20);
    rect(23.5, 263.5, 20, 20);
    rect(23.5, 303.5, 20, 20);
    //Left-Right Flanges
    fill(255, 150, 0);
    rect(343.5, 63.5, 20, 20);
    rect(343.5, 103.5, 20, 20);
    rect(343.5, 143.5, 20, 20);
    rect(343.5, 183.5, 20, 20);
    rect(343.5, 223.5, 20, 20);
    rect(343.5, 263.5, 20, 20);
    rect(343.5, 303.5, 20, 20);
    //Right-Right Flanges
    fill(255, 190, 0);
    rect(363.5, 63.5, 20, 20);
    rect(363.5, 103.5, 20, 20);
    rect(363.5, 143.5, 20, 20);
    rect(363.5, 183.5, 20, 20);
    rect(363.5, 223.5, 20, 20);
    rect(363.5, 263.5, 20, 20);
    rect(363.5, 303.5, 20, 20);
    custom_images.push(get(0,0,400,400));

    //Custom Enemy graphic
    background(255,255,255,0);
    noStroke();
    fill(255, 0, 0);
    rect(140, 20, 20, 20);
    rect(120, 40, 20, 20);
    rect(100, 60, 20, 20);
    rect(120, 80, 20, 40);
    rect(140, 100, 20, 20);
    rect(100, 120, 20, 20);
    rect(80, 140, 20, 180);
    rect(60, 180, 280, 20);//Wide box
    rect(40, 160, 20, 20);
    rect(20, 80, 20, 80);
    rect(40, 240, 40, 20);
    rect(20, 220, 20, 20);
    rect(40, 300, 80, 20);
    rect(20, 320, 20, 60);
    rect(100, 320, 20, 20);
    rect(120, 340, 160, 20);
    rect(180, 200, 40, 160);
    rect(280, 300, 20, 40);
    rect(280, 300, 80, 20);
    rect(360, 320, 20, 60);
    rect(300, 140, 20, 180);
    rect(320, 240, 40, 20);
    rect(360, 220, 20, 20);
    rect(340, 160, 20, 20);
    rect(360, 80, 20, 80);
    rect(280, 120, 20, 20);
    rect(240, 100, 40, 20);
    rect(260, 80, 20, 20);
    rect(280, 60, 20, 20);
    rect(260, 40, 20, 20);
    rect(240, 20, 20, 20);
    rect(160, 80, 80, 20);
    rect(160, 120, 80, 20);
    rect(180, 140, 40, 20);
    custom_images.push(get(0,0,400,400));
    
    //Custom unpowered Player graphic
    background(255,255,255,0);
    noStroke();
    fill(0, 0, 0);
    //Black background for unpowered
    rect(100, 0, 200, 400);
    rect(20, 160, 360, 140);
    //Outline
    fill(0,255,255);
    rect(100, 0, 200, 40);
    rect(120, 40, 20, 40);
    rect(260, 40, 20, 40);
    rect(100, 0, 20, 400);
    rect(280, 0, 20, 400);
    rect(20, 160, 20, 140);
    rect(360, 160, 20, 140);
    rect(20, 160, 360, 20);
    rect(20, 220, 100, 20);
    rect(20, 280, 100, 20);
    rect(280, 220, 100, 20);
    rect(280, 280, 100, 20);
    rect(100, 260, 200, 20);
    rect(100, 300, 200, 20);
    rect(100, 340, 200, 20);
    rect(100, 380, 200, 20);
    rect(180, 300, 40, 80);
    rect(160, 280, 20, 20);
    rect(220, 280, 20, 20);
    rect(160, 140, 80, 20);
    rect(160, 120, 20, 80);
    rect(220, 120, 20, 80);
    rect(160, 80, 20, 20);
    rect(220, 80, 20, 20);
    rect(180, 200, 40, 20);
    custom_images.push(get(0,0,400,400));
};
init_custom_graphics();
    
var chipObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.visible = 1;
};

var wallObj = function(x, y) {
    this.x = x;
    this.y = y;
};

var PCObj = function(x, y) {
    this.x = x;
    this.y = y;
};

var qObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.fcost = 0;
};

qObj.prototype.set = function(a, b) {
    this.x = a;
    this.y = b;
};

var graph = new Array(20);
var cost = new Array(20);
var inq = new Array(20);
var comefrom = new Array(20);
for (var i=0; i<20; i++) {
    graph[i] = new Array(20);
    cost[i] = new Array(20);
    inq[i] = new Array(20);
    comefrom[i] = new Array(20);
}
var path = [];
var q = [];
for (i=0; i<400; i++) {
    path.push(new PVector(0, 0));
    q.push(new qObj(0, 0));
}
for (i=0; i<20; i++) {
    for(var j=0; j<20; j++) {
        comefrom[i][j] = new PVector(0, 0);
    }
}
var pathLen = 0;
var pathFound = 0;
var qLen = 0;
var qStart = 0;

var initialized = 0;
var walls = [];
var initializeTilemap = function () {
    for (var i=0; i<tileMap.length; i++) {
        for (var j=0; j<tileMap[i].length; j++) {
            if (tileMap[i][j] === 'w')
            {
                walls.push(new wallObj(j*20, i*20));
                graph[i][j] = -1;
            }
            else if(tileMap[i][j] === 'c')
            {
                chips.push(new chipObj(j*20, i*20));
                collectibles = collectibles + 1;
                graph[i][j] = 0;
            }
            else {
                graph[i][j] = 0;
            }
        }
    }
};

var haltState = function() {
    this.angle = 0;
};

var turnState = function() {
    this.angle = 0;
    this.angleDir = 0;
    this.vec = new PVector(0,0);
};

var chaseState = function() {
    this.step = new PVector(0,0);
};

var tankObj = function(x, y) {
    this.position = new PVector(x, y);
    this.state = [new haltState(), new turnState(), new chaseState()];
    this.currState = 0;
    this.angle = 0;
    this.whisker1 = new PVector(0, 0);
    this.whisker2 = new PVector(0, 0);
};

var targetObj = function(x, y) {
    this.x = x;
    this.y = y;
};

var PC = new PCObj(70, 60);
var tank = new tankObj(350, 60);
var tank2 = new tankObj(260, 350);
var target = new targetObj(0, 0);
var target2 = new targetObj(0, 0);
var targetPos = new targetObj(0, 0);
var targetPos2 = new targetObj(0, 0);
var finalDest = new targetObj(0, 0);
var finalDest2 = new targetObj(0, 0);

tankObj.prototype.changeState = function(x) {
    this.currState = x;
};

haltState.prototype.execute = function(me) {
    
    if (dist(me.position.x, me.position.y, target.x, target.y) < 5) {
        me.changeState(1);
    }
};

turnState.prototype.execute = function(me) {
    this.vec.set(target.x - me.position.x, target.y - me.position.y);
    // this.angle = this.vec.heading();
    // var angleDiff = abs(this.angle - me.angle);
    // if (angleDiff > 2) {
    //     if (this.angle > me.angle) {
    //         this.angleDir = 1;
    //     }
    //     else {
    //         this.angleDir = -1;
    //     }
    //     if (angleDiff > 180) {
    //         this.angleDir = -this.angleDir;
    //     }
        
    //     me.angle += this.angleDir;
    //     if (me.angle > 180) {
    //         me.angle = -179;
    //     }
    //     else if (me.angle < -180) {
    //         me.angle = 179;
    //     }
    // }
    // else {
        me.changeState(2);
    // }
};

var findIntersection = function(p) {
    var distance = 0;
    
    for (var i=0; i<walls.length; i++) {
        var d = dist(p.x, p.y, walls[i].x+10, walls[i].y+10);
        if (d < 20) {
            distance += d;
        }
    }
    
    if (distance === 0) {
        distance = 100000;
    }
    
    return(distance);
};

chaseState.prototype.collideWall = function(me) {
    var collide = 0;
    this.step.set(target.x - me.position.x, target.y - me.position.y);
    this.step.normalize();
    this.step.mult(15);
    var ahead = PVector.add(me.position, this.step);
    for (var i=0; i<walls.length; i++) {
        if (dist(ahead.x, ahead.y, walls[i].x+10, walls[i].y+10) < 20) {
            collide = 1;
            
            me.whisker1.set(this.step.x, this.step.y);
            me.whisker2.set(this.step.x, this.step.y);
            me.whisker1.rotate(45);
            me.whisker2.rotate(-45);
            me.whisker1.add(me.position);
            me.whisker2.add(me.position);
            var dist1 = findIntersection(me.whisker1);
            var dist2 = findIntersection(me.whisker2);
            
            if (dist1 > dist2) {
                target.x = me.whisker1.x;
                target.y = me.whisker1.y;
            }
            else {
                target.x = me.whisker2.x;
                target.y = me.whisker2.y;
            }
        }
    }
    
    return(collide);
};

chaseState.prototype.execute = function(me) {
    if (this.collideWall(me) === 1) {
        me.changeState(1);
    }
    else if (dist(target.x, target.y, me.position.x, me.position.y) > 2) {
        this.step.set(target.x - me.position.x, target.y - me.position.y);
        this.step.normalize();
        me.position.add(this.step);
    }
    else {
        if ((finalDest.x === target.x) && (finalDest.y === target.y)) {
            me.changeState(0);
        }
        else {
            pathLen--;
            if (pathLen > 0) {
                target.x = path[pathLen].x;
                target.y = path[pathLen].y;
            }
            else {
                target.x = finalDest.x;
                target.y = finalDest.y;
            }
            me.changeState(1);
        }
    }
};

tankObj.prototype.draw = function()
{
    // pushMatrix();
    // translate(this.position.x, this.position.y);
    // rotate(this.angle);
    // fill(31, 79, 28);
    // rect(-10, -10, 20, 20);
    // rect(0, -2, 20, 4);
    // popMatrix();
    image(custom_images[2], this.position.x-10, this.position.y-10, 20, 20);
};

wallObj.prototype.draw = function()
{
    image(custom_images[0], this.x, this.y, 20, 20);
};

chipObj.prototype.draw = function()
{
    image(custom_images[1], this.x, this.y, 20, 20);
};

PCObj.prototype.draw = function()
{
    image(custom_images[3], this.x-10, this.y-10, 20, 20);
};

var initGraph = function(x, y) {
    for (var i = 0; i< 20; i++) {
        for (var j = 0; j<20; j++) {
            if (graph[i][j] > 0) {
                graph[i][j] = 0;
            }
            inq[i][j] = 0;
            cost[i][j] = 0;
        }
    }
    
    graph[x][y] = 1;
};

//////////////////////////////////////////////////////////////////////
var findAStarPath = function(x, y) {
    var i, j, a, b;
    qLen = 0;
    graph[x][y] = 1;
    inq[x][y] = 1;
    q[qLen].set(x, y);
    q[qLen].fcost = 0;
    qLen++;
    pathLen = 0;
    qStart = 0;
    
    var findMinInQ = function() {
        var min = q[qStart].fcost;
        var minIndex = qStart;
        for (var i = qStart+1; i<qLen; i++) {
            if (q[i].fcost < min) {
                min = q[i].qStart;
                minIndex = i;
            }
        }
        if (minIndex !== qStart) {  // swap
            var t1 = q[minIndex].x;
            var t2 = q[minIndex].y;
            var t3 = q[minIndex].fcost;
            q[minIndex].x = q[qStart].x;
            q[minIndex].y = q[qStart].y;
            q[minIndex].fcost = q[qStart].fcost;
            q[qStart].x = t1;
            q[qStart].y = t2;
            q[qStart].fcost = t3;
        }
    };
    
    var setComeFrom = function(a, b, i, j) {
        inq[a][b] = 1;
        comefrom[a][b].set(i, j);
        q[qLen].set(a, b);
        cost[a][b] = cost[i][j] + 10;
        q[qLen].fcost = cost[a][b] + dist(b*20+10, a*20+10, finalDest.x,
finalDest.y);
        qLen++;
    };
    
    while ((qStart < qLen) && (pathFound === 0)) {
        findMinInQ();
        i = q[qStart].x;
        j = q[qStart].y;
        graph[i][j] = 1;
        qStart++;
        
        if ((i === targetPos.x) && (j === targetPos.y)) {
            pathFound = 1;
            path[pathLen].set(j*20+10, i*20+10);
            pathLen++;
        }
        
        a = i+1;
        b = j;
        if ((a < 20) && (pathFound === 0)) {
            if ((graph[a][b] === 0) && (inq[a][b] === 0)) {
                setComeFrom(a, b, i, j);
            }
        }
        a = i-1;
        b = j;
        if ((a >= 0) && (pathFound === 0)) {
            if ((graph[a][b] === 0) && (inq[a][b] === 0)) {
                setComeFrom(a, b, i, j);
            }
        }
        a = i;
        b = j+1;
        if ((b < 20) && (pathFound === 0)) {
            if ((graph[a][b] === 0) && (inq[a][b] === 0)) {
                setComeFrom(a, b, i, j);
            }
        }
        a = i;
        b = j-1;
        if ((b >= 0) && (pathFound === 0)) {
            if ((graph[a][b] === 0) && (inq[a][b] === 0)) {
                setComeFrom(a, b, i, j);
            }
        }
    }   // while
    
    while ((i !== x) || (j !== y)) {
        a = comefrom[i][j].x;
        b = comefrom[i][j].y;
        path[pathLen].set(b*20 + 10, a*20+10);
        pathLen++;
        i = a;
        j = b;
    }
};

var mouseClicked = function() {
    target.x = PC.x;
    target.y = PC.y;
    finalDest.x = target.x;
    finalDest.y = target.y;
    targetPos.x = floor(finalDest.y / 20);
    targetPos.y = floor(finalDest.x / 20);
    var i = floor(tank.position.y / 20);
    var j = floor(tank.position.x / 20);
    initGraph(i, j);
    pathFound = 0;
    pathLen = 0;
    findAStarPath(i, j);
    pathLen--;
    target.x = path[pathLen].x;
    target.y = path[pathLen].y;
    if (tank.currState !== 1)
    {
        tank.changeState(1);
    }
};

var draw = function() {
    if (initialized === 0) {
        initialized = 1;
        initializeTilemap();
    }
    
    if(screen_state === 0)
    {
         if(keyArray[87] === 1)//w is pressed
            {
                var moved = 1;
                for(var i = 0; i<walls.length; i++)
                {
                    if(moved === 1)
                    {
                        if(PC.x-10 > walls[i].x-20 && PC.x-10 < walls[i].x+20)
                        {
                            if(PC.y-30 === walls[i].y)
                            {
                                moved = 0;
                            }
                        }
                    }
                }
                if(moved === 1)
                {
                    PC.y = PC.y - 2;
                }
            }
            else if(keyArray[83] === 1)//s is pressed
            {
                var moved = 1;
                for(var i = 0; i<walls.length; i++)
                {
                    if(moved === 1)
                    {
                        if(PC.x-10 > walls[i].x-20 && PC.x-10 < walls[i].x+20)
                        {
                            if(PC.y+10 === walls[i].y)
                            {
                                moved = 0;
                            }
                        }
                    }
                }
                if(moved === 1)
                {
                    PC.y = PC.y + 2;
                }
            }
            
            if(keyArray[65] === 1)//a is pressed
            {
                var moved = 1;
                for(var i = 0; i<walls.length; i++)
                {
                    if(moved === 1)
                    {
                        if(PC.y > walls[i].y-10 && PC.y < walls[i].y+30)
                        {
                            if(PC.x-30 === walls[i].x)
                            {
                                moved = 0;
                            }
                        }
                    }
                }
                if(moved === 1)
                {
                    PC.x = PC.x - 2;
                }
            }
            else if(keyArray[68] === 1)//d is pressed
            {
                var moved = 1;
                for(var i = 0; i<walls.length; i++)
                {
                    if(moved === 1)
                    {
                        if(PC.y > walls[i].y-10 && PC.y < walls[i].y+30)
                        {
                            if(PC.x+10 === walls[i].x)
                            {
                                moved = 0;
                            }
                        }
                    }
                }
                if(moved === 1)
                {
                    PC.x = PC.x + 2;
                }
            }
        background(0, 0, 0);
        if(tank1_timer < frameCount - 250)
        {
            tank1_timer = frameCount;
            target.x = PC.x;
            target.y = PC.y;
            finalDest.x = target.x;
            finalDest.y = target.y;
            targetPos.x = floor(finalDest.y / 20);
            targetPos.y = floor(finalDest.x / 20);
            var i = floor(tank.position.y / 20);
            var j = floor(tank.position.x / 20);
            initGraph(i, j);
            pathFound = 0;
            pathLen = 0;
            findAStarPath(i, j);
            pathLen--;
            target.x = path[pathLen].x;
            target.y = path[pathLen].y;
            if (tank.currState !== 1)
            {
                tank.changeState(1);
            }
        }
        if(tank2_timer < frameCount - 250)
        {
            tank2_timer = frameCount;
            target2.x = PC.x;
            target2.y = PC.y;
            finalDest2.x = target2.x;
            finalDest2.y = target2.y;
            targetPos2.x = floor(finalDest2.y / 20);
            targetPos2.y = floor(finalDest2.x / 20);
            var k = floor(tank2.position.y / 20);
            var l = floor(tank2.position.x / 20);
            initGraph(k, l);
            pathFound = 0;
            pathLen = 0;
            findAStarPath(k, l);
            pathLen--;
            target2.x = path[pathLen].x;
            target2.y = path[pathLen].y;
            if (tank2.currState !== 1)
            {
                tank2.changeState(1);
            }
        }
        for(var z = 0; z<walls.length; z++)
        {
            walls[z].draw();
        }
        //Draws any not collected chips, updates the number of collectibles left for victory purposes
        for (var v=0; v<chips.length; v++)
        {
            if(chips[v].visible === 1)
            {
                chips[v].draw();
            }
        }
        
        for (var i=0; i<chips.length; i++)
        {
            if(PC.x < chips[i].x+26 && PC.x > chips[i].x-6 &&
               PC.y < chips[i].y+26 && PC.y > chips[i].y-6 &&
               chips[i].visible === 1)
            {
                chips[i].visible = 0;
                collectibles = collectibles - 1;
            }
        }
        
        PC.draw();
        tank.draw();
        tank.state[tank.currState].execute(tank);
        tank2.draw();
        tank2.state[tank2.currState].execute(tank2);
        
        if(collectibles === 0)//If no more collectables, then the player has won
        {
            screen_state = 2;
        }
            
        if(screen_state !== 2)//Checks if the monster has hit the player
        {
            if(PC.x < tank.position.x+14 && PC.x > tank.position.x-14 &&
               PC.y < tank.position.y+14 && PC.y > tank.position.y-14)
            {
                screen_state = 3;
            }
            if(PC.x < tank2.position.x+14 && PC.x > tank2.position.x-14 &&
               PC.y < tank2.position.y+14 && PC.y > tank2.position.y-14)
            {
                screen_state = 3;
            }
        }
    }
    else if(screen_state === 2)//Victory screen
    {
        if(fade_counter <= 130)
        {
            fill(255, 255, 255, 4);
            rect(0, 0, 400, 400);
            fade_counter++;
        }
        else if(fade_counter > 130)
        {
            fill(255, 255, 255);
            rect(0, 0, 400, 400);
            fill(0, 0, 0);
            text("You win!\n   :D", 130, 180);
        }
    }
    else if(screen_state === 3)//Defeat screen
    {
        if(fade_counter <= 130)
        {
            fill(0, 0, 0, 4);
            rect(0, 0, 400, 400);
            fade_counter++;
        }
        else if(fade_counter > 130)
        {
            fill(0, 0, 0);
            rect(0, 0, 400, 400);
            fill(255, 255, 255);
            text("Game Over\n    :(", 115, 180);
        }
    }
};


