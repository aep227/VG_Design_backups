/*
    Author: Addison Powell
    Date: September 25, 2019
    Comments: A vastly improved maze game from Project 2. The maze is bigger, and movement
    is smoother, not limited to tiles, and diagonal movement is possible. All new custom
    graphics were made for everything from the walls, powerups, enemies, and the player.
    Enemies have multiple states: rest, chase, and flee. If the player is too far away, the
    enemies are in the rest state where they don't move. Once the player is close enough,
    the enemies will chase the player if close enough, or if the player is under the effect
    of a powerup, they will flee. Each enemy also has a random speed generated when they
    are created, so some will be faster than others. Enemies also collide with walls.
    The start screen was also cleaned up a little bit.
    
    Meta-notes:
        -Still had trouble with the victory/defeat screens. I wanted to have the game fade
        to white with a trophy (victory) or black with a skull graphic (defeat), but the
        two ways I tried to implement this effect didn't work. First was to have an
        incremental transparency variable that would be incremented sort of like
        var opa = 0;
        fill(255, 255, 255, opa);
        rect(0, 0, 400, 400);
        opa += 1;
        but that always went fully opaque instantly, no matter how slight an increment I
        had for the opa variable. The second way was to manually change the fill to have
        different transparencies, seperated by some kind of time lapse. ProcessingJS
        doesn't have a sleep(); function, so I tried using empty for loops that would
        increment. I didn't have any luck with this either, so finally I gave up and
        did what's implemented here: a slightly transparent white/black layer over the
        screen with some text. Not as pretty as I'd like, but I'd wasted too much time on
        the other methods.
        -Finally got collisions working with the enemies. They only collide with walls
        and not with each other. This was mostly a time constraint issue again, but I
        like to think of it as a viable strategy :)
*/

//Used in the various game states. 0 = start screen, 1 = game screen
//2 = victory screen, 3 = defeat screen
var screen_state = 0;
var f = createFont("monospace");

var start_box = function(x, y, r, g, b)
{
    this.x = x;
    this.y = y;
    this.r = r;
    this.g = g;
    this.b = b;
};

start_box.prototype.display = function()
{
    fill(this.r, this.g, this.b);
    noStroke();
    rect(this.x, this.y, 250, 50);
    fill(0, 0, 0);
    textFont(f, 24);
    text("START", this.x+85, this.y+32);
};
        
var tilemap = [
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwww                                                  wwwwwwwwww",
        "wwwwwwwwww                                                  wwwwwwwwww",
        "wwwwwwwwww                     w    w                       wwwwwwwwww",
        "wwwwwwwwww   u                  w  w                  u     wwwwwwwwww",
        "wwwwwwwwww    wwwwwwc   wwwwww   cc   wwwwww   cwwwwww      wwwwwwwwww",
        "wwwwwwwwww    wwwwwc            w  w            cwwwww      wwwwwwwwww",
        "wwwwwwwwww    wwwwc            w    w            cwwww      wwwwwwwwww",
        "wwwwwwwwww    wwwc                                cwww      wwwwwwwwww",
        "wwwwwwwwww    wwc                                  cww      wwwwwwwwww",
        "wwwwwwwwww    wc               wwccww               cw      wwwwwwwwww",
        "wwwwwwwwww    c      ccc        wccw        ccc      c      wwwwwwwwww",
        "wwwwwwwwww           cww         ww         wwc             wwwwwwwwww",
        "wwwwwwwwww           cwww        ww        wwwc             wwwwwwwwww",
        "wwwwwwwwww             www       ww       www               wwwwwwwwww",
        "wwwwwwwwww    w         www      ww      www         w      wwwwwwwwww",
        "wwwwwwwwww    w e        ww  e   ww   e  ww        e w      wwwwwwwwww",
        "wwwwwwwwww    w                                      w      wwwwwwwwww",
        "wwwwwwwwww    w                                      w      wwwwwwwwww",
        "wwwwwwwwww    w                                      w      wwwwwwwwww",
        "wwwwwwwwww    w                                      w      wwwwwwwwww",
        "wwwwwwwwww                    e  cc  e                      wwwwwwwwww",
        "wwwwwwwwww  w   w   w          wwwwww          w   w   w    wwwwwwwwww",
        "wwwwwwwwww   w w    ww         wwwwww         ww    w w     wwwwwwwwww",
        "wwwwwwwwww    c     ccwwwww   cwwwwwwc   wwwwwcc     c      wwwwwwwwww",
        "wwwwwwwwww    c     ccwwwww   cwwwwwwc   wwwwwcc     c      wwwwwwwwww",
        "wwwwwwwwww   w w    ww         wwwwww         ww    w w     wwwwwwwwww",
        "wwwwwwwwww  w   w   w          wwwwww          w   w   w    wwwwwwwwww",
        "wwwwwwwwww                    e  cc  e                      wwwwwwwwww",
        "wwwwwwwwww    w                                      w      wwwwwwwwww",
        "wwwwwwwwww    w                                      w      wwwwwwwwww",
        "wwwwwwwwww    w                                      w      wwwwwwwwww",
        "wwwwwwwwww    w e        ww  e   ww   e  ww        e w      wwwwwwwwww",
        "wwwwwwwwww    w         www      ww      www         w      wwwwwwwwww",
        "wwwwwwwwww    w        www       ww       www        w      wwwwwwwwww",
        "wwwwwwwwww           cwww        ww        wwwc             wwwwwwwwww",
        "wwwwwwwwww           cww         ww         wwc             wwwwwwwwww",
        "wwwwwwwwww           ccc        wccw        ccc             wwwwwwwwww",
        "wwwwwwwwww    c                wwccww                c      wwwwwwwwww",
        "wwwwwwwwww    wc                                    cw      wwwwwwwwww",
        "wwwwwwwwww    wwc                                  cww      wwwwwwwwww",
        "wwwwwwwwww    wwwc                                cwww      wwwwwwwwww",
        "wwwwwwwwww    wwwwc            w    w            cwwww      wwwwwwwwww",
        "wwwwwwwwww    wwwwwc            w  w            cwwwww      wwwwwwwwww",
        "wwwwwwwwww    wwwwwwc   wwwwww   cc   wwwwww   cwwwwww      wwwwwwwwww",
        "wwwwwwwwww   u                  w  w                  u     wwwwwwwwww",
        "wwwwwwwwww                     w    w                       wwwwwwwwww",
        "wwwwwwwwww p                                                wwwwwwwwww",
        "wwwwwwwwww                                                  wwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
        "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",];

var chipObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.visible = 1;
};

var wallObj = function(x, y) {
    this.x = x;
    this.y = y;
};

var PCObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.powered = 0;
    this.power_timer = 0;
};

var EnemyObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.currFrameCountEnemy = 0;
    this.speed = random(1,4);
};

var PowerObj = function(x,y) {
    this.x = x;
    this.y = y;
    this.visible = 1;
};

var start_box1 = new start_box(80, 320, 0, 255, 0);
var keyArray = [];
var custom_images = []; //Wall = 0, collectable = 1, powerup = 2, enemy = 3, PC = 4
var init_custom_graphics = function()
{
    //Custom wall graphic
    fill(0, 120, 0);
    noStroke();
    rect(0, 0, 400, 400);
    fill(100, 200, 100);
    rect(60, 0, 20, 40);
    rect(100, 0, 20, 60);
    rect(140, 0, 20, 80);
    rect(180, 0, 20, 100);
    rect(220, 0, 20, 120);
    rect(260, 0, 20, 240);
    rect(300, 0, 20, 160);
    rect(340, 0, 20, 80);
    rect(0, 60, 40, 20);
    rect(0, 100, 60, 20);
    rect(0, 140, 80, 20);
    rect(0, 180, 100, 20);
    rect(0, 220, 280, 20);
    rect(40, 40, 20, 20);
    rect(60, 80, 20, 20);
    rect(80, 60, 20, 20);
    rect(80, 120, 20, 20);
    rect(100, 100, 20, 20);
    rect(120, 80, 20, 20);
    rect(160, 100, 20, 20);
    rect(140, 120, 20, 20);
    rect(120, 140, 20, 20);
    rect(100, 160, 20, 20);
    rect(140, 180, 20, 220);
    rect(160, 160, 20, 20);
    rect(180, 140, 20, 20);
    rect(200, 120, 20, 20);
    rect(300, 140, 100, 20);
    rect(300, 100, 100, 20);
    rect(340, 60, 60, 20);
    rect(300, 180, 100, 20);
    rect(300, 180, 20, 80);
    rect(340, 220, 60, 20);
    rect(340, 220, 20, 180);
    rect(60, 220, 20, 180);
    rect(100, 220, 20, 180);
    rect(200, 220, 20, 60);
    rect(180, 360, 20, 40);
    rect(220, 360, 20, 40);
    rect(300, 360, 20, 40);
    rect(280, 340, 20, 20);
    rect(260, 320, 20, 20);
    rect(240, 300, 20, 20);
    rect(220, 280, 20, 20);
    rect(280, 260, 20, 20);
    rect(260, 280, 20, 20);
    rect(220, 320, 20, 20);
    rect(200, 340, 20, 20);
    custom_images.push(get(0,0,400,400));
    
    //Custom chip (collectable) graphic
    background(0, 0, 0, 0);
    noStroke();
    //Center chip
    fill(80, 80, 80);
    rect(43.5, 43.5, 300, 300);
    fill(150, 150, 150);
    rect(43.5, 323.5, 300, 20);
    fill(255, 200, 0);
    rect(83.5, 123.5, 20, 120);
    rect(163.5, 123.5, 20, 120);
    rect(83.5, 163.5, 80, 20);
    rect(103.5, 103.5, 60, 20);
    rect(243.5, 123.5, 20, 120);
    rect(203.5, 103.5, 100, 20);
    rect(203.5, 223.5, 100, 20);
    //Top-Top Flanges
    fill(255, 80, 0);
    rect(63.5, 3.5, 20, 20);
    rect(103.5, 3.5, 20, 20);
    rect(143.5, 3.5, 20, 20);
    rect(183.5, 3.5, 20, 20);
    rect(223.5, 3.5, 20, 20);
    rect(263.5, 3.5, 20, 20);
    rect(303.5, 3.5, 20, 20);
    //Bot-Top Flanges
    fill(255, 150, 0);
    rect(63.5, 23.5, 20, 20);
    rect(103.5, 23.5, 20, 20);
    rect(143.5, 23.5, 20, 20);
    rect(183.5, 23.5, 20, 20);
    rect(223.5, 23.5, 20, 20);
    rect(263.5, 23.5, 20, 20);
    rect(303.5, 23.5, 20, 20);
    //Top-Bot Flanges
    fill(255, 150, 0);
    rect(63.5, 343.5, 20, 20);
    rect(103.5, 343.5, 20, 20);
    rect(143.5, 343.5, 20, 20);
    rect(183.5, 343.5, 20, 20);
    rect(223.5, 343.5, 20, 20);
    rect(263.5, 343.5, 20, 20);
    rect(303.5, 343.5, 20, 20);
    //Bot-Bot Flanges
    fill(255, 190, 0);
    rect(63.5, 363.5, 20, 20);
    rect(103.5, 363.5, 20, 20);
    rect(143.5, 363.5, 20, 20);
    rect(183.5, 363.5, 20, 20);
    rect(223.5, 363.5, 20, 20);
    rect(263.5, 363.5, 20, 20);
    rect(303.5, 363.5, 20, 20);
    //Left-Left Flanges
    fill(255, 80, 0);
    rect(3.5, 63.5, 20, 20);
    rect(3.5, 103.5, 20, 20);
    rect(3.5, 143.5, 20, 20);
    rect(3.5, 183.5, 20, 20);
    rect(3.5, 223.5, 20, 20);
    rect(3.5, 263.5, 20, 20);
    rect(3.5, 303.5, 20, 20);
    //Right-Left Flanges
    fill(255, 150, 0);
    rect(23.5, 63.5, 20, 20);
    rect(23.5, 103.5, 20, 20);
    rect(23.5, 143.5, 20, 20);
    rect(23.5, 183.5, 20, 20);
    rect(23.5, 223.5, 20, 20);
    rect(23.5, 263.5, 20, 20);
    rect(23.5, 303.5, 20, 20);
    //Left-Right Flanges
    fill(255, 150, 0);
    rect(343.5, 63.5, 20, 20);
    rect(343.5, 103.5, 20, 20);
    rect(343.5, 143.5, 20, 20);
    rect(343.5, 183.5, 20, 20);
    rect(343.5, 223.5, 20, 20);
    rect(343.5, 263.5, 20, 20);
    rect(343.5, 303.5, 20, 20);
    //Right-Right Flanges
    fill(255, 190, 0);
    rect(363.5, 63.5, 20, 20);
    rect(363.5, 103.5, 20, 20);
    rect(363.5, 143.5, 20, 20);
    rect(363.5, 183.5, 20, 20);
    rect(363.5, 223.5, 20, 20);
    rect(363.5, 263.5, 20, 20);
    rect(363.5, 303.5, 20, 20);
    custom_images.push(get(0,0,400,400));
    
    //Custom Powerup graphic
    background(0, 0, 0, 0);
    noStroke();
    fill(255, 255, 0);
    rect(30, 30, 300, 20);
    rect(330, 50, 20, 20);
    rect(350, 70, 20, 300);
    rect(30, 50, 20, 320);
    rect(30, 350, 320, 20);
    rect(110, 30, 20, 140);
    rect(270, 30, 20, 140);
    rect(110, 150, 160, 20);
    rect(70, 210, 260, 20);
    rect(70, 210, 20, 160);
    rect(310, 210, 20, 160);
    rect(130, 50, 100, 110);
    rect(230, 50, 40, 20);
    custom_images.push(get(0,0,400,400));

    //Custom Enemy graphic
    background(255,255,255,0);
    noStroke();
    fill(255, 0, 0);
    rect(140, 20, 20, 20);
    rect(120, 40, 20, 20);
    rect(100, 60, 20, 20);
    rect(120, 80, 20, 40);
    rect(140, 100, 20, 20);
    rect(100, 120, 20, 20);
    rect(80, 140, 20, 180);
    rect(60, 180, 280, 20);//Wide box
    rect(40, 160, 20, 20);
    rect(20, 80, 20, 80);
    rect(40, 240, 40, 20);
    rect(20, 220, 20, 20);
    rect(40, 300, 80, 20);
    rect(20, 320, 20, 60);
    rect(100, 320, 20, 20);
    rect(120, 340, 160, 20);
    rect(180, 200, 40, 160);
    rect(280, 300, 20, 40);
    rect(280, 300, 80, 20);
    rect(360, 320, 20, 60);
    rect(300, 140, 20, 180);
    rect(320, 240, 40, 20);
    rect(360, 220, 20, 20);
    rect(340, 160, 20, 20);
    rect(360, 80, 20, 80);
    rect(280, 120, 20, 20);
    rect(240, 100, 40, 20);
    rect(260, 80, 20, 20);
    rect(280, 60, 20, 20);
    rect(260, 40, 20, 20);
    rect(240, 20, 20, 20);
    rect(160, 80, 80, 20);
    rect(160, 120, 80, 20);
    rect(180, 140, 40, 20);
    custom_images.push(get(0,0,400,400));
    
    //Custom unpowered Player graphic
    background(255,255,255,0);
    noStroke();
    fill(0, 0, 0);
    //Black background for unpowered
    rect(100, 0, 200, 400);
    rect(20, 160, 360, 140);
    //Outline
    fill(0,255,255);
    rect(100, 0, 200, 40);
    rect(120, 40, 20, 40);
    rect(260, 40, 20, 40);
    rect(100, 0, 20, 400);
    rect(280, 0, 20, 400);
    rect(20, 160, 20, 140);
    rect(360, 160, 20, 140);
    rect(20, 160, 360, 20);
    rect(20, 220, 100, 20);
    rect(20, 280, 100, 20);
    rect(280, 220, 100, 20);
    rect(280, 280, 100, 20);
    rect(100, 260, 200, 20);
    rect(100, 300, 200, 20);
    rect(100, 340, 200, 20);
    rect(100, 380, 200, 20);
    rect(180, 300, 40, 80);
    rect(160, 280, 20, 20);
    rect(220, 280, 20, 20);
    rect(160, 140, 80, 20);
    rect(160, 120, 20, 80);
    rect(220, 120, 20, 80);
    rect(160, 80, 20, 20);
    rect(220, 80, 20, 20);
    rect(180, 200, 40, 20);
    custom_images.push(get(0,0,400,400));

    
    //Custom powered Player graphic
    background(255,255,255,0);
    noStroke();
    fill(255, 255, 255);
    //White background for powered
    rect(100, 0, 200, 400);
    rect(20, 160, 360, 140);
    //Outline
    fill(255,0, 255);
    rect(100, 0, 200, 40);
    rect(120, 40, 20, 40);
    rect(260, 40, 20, 40);
    rect(100, 0, 20, 400);
    rect(280, 0, 20, 400);
    rect(20, 160, 20, 140);
    rect(360, 160, 20, 140);
    rect(20, 160, 360, 20);
    rect(20, 220, 100, 20);
    rect(20, 280, 100, 20);
    rect(280, 220, 100, 20);
    rect(280, 280, 100, 20);
    rect(100, 260, 200, 20);
    rect(100, 300, 200, 20);
    rect(100, 340, 200, 20);
    rect(100, 380, 200, 20);
    rect(180, 300, 40, 80);
    rect(160, 280, 20, 20);
    rect(220, 280, 20, 20);
    rect(160, 140, 80, 20);
    rect(160, 120, 20, 80);
    rect(220, 120, 20, 80);
    rect(160, 80, 20, 20);
    rect(220, 80, 20, 20);
    rect(180, 200, 40, 20);
    custom_images.push(get(0,0,400,400));
};

//Arrays for holding entity locations from the tilemap
var walls = [];
var chips = [];
var PC = [];
var enemies = [];
var powerups = [];
var collectibles = 0;


wallObj.prototype.draw = function()
{
    image(custom_images[0], this.x, this.y, 20, 20);
};

chipObj.prototype.draw = function()
{
    image(custom_images[1], this.x, this.y, 20, 20);
};

PowerObj.prototype.draw = function()
{
    image(custom_images[2], this.x, this.y, 20, 20);
};

EnemyObj.prototype.draw = function()
{
    image(custom_images[3], this.x, this.y, 20, 20);
};

PCObj.prototype.draw = function()
{
    if(this.powered === 1)
    {
        image(custom_images[5], this.x, this.y, 20, 20);
    }
    else
    {
        image(custom_images[4], this.x, this.y, 20, 20);
    }
};

var keyPressed = function() {
    keyArray[keyCode] = 1;
};

var keyReleased = function() {
    keyArray[keyCode] = 0;
};

//Loads the entity locations from the tilemap
var initTilemap = function() {
    for (var i = 0; i< tilemap.length; i++)
    {
        for (var j = 0; j < tilemap[i].length; j++)
        {
            switch (tilemap[i][j])
            {
                case 'w': walls.push(new wallObj(j*20, i*20));
                    break;
                case 'c': chips.push(new chipObj(j*20, i*20));
                        collectibles = collectibles + 1;
                    break;
                case 'p': PC.push(new PCObj(j*20, i*20));
                    break;
                case 'e': enemies.push(new EnemyObj(j*20, i*20));
                    break;
                case 'u': powerups.push(new PowerObj(j*20, i*20));
                    break;
            }
        }
    }
};

initTilemap();
init_custom_graphics();

draw = function()
{
    if(screen_state === 0)//Draws the "start screen" until the button is clicked
    {
        background(0, 0, 0);
        textFont(f, 24);
        fill(0, 255, 0);
        text("Chip Collector 2", 85, 30);
        textFont(f, 16);
        text("Collect all the computer chips to win.\nAvoid the bugs!\nThe floppy disk will make you\ninvincible for several seconds.", 20 ,54); 
        text("\nControls:\nw = move up, s = move down,\na = move left, d = move right", 20 ,134);
        start_box1.display();
        if(mouseIsPressed)
        {
            if(mouseX > start_box1.x && mouseX < start_box1.x+250 &&
                mouseY > start_box1.y && mouseY < start_box1.y+50)
            {
                screen_state = 1;
            }
        }
    }
    else if(screen_state === 1)//Main game screen
    {
        //Check for any player movement inputs and check for any collisions with a wall before moving the player
        if(keyArray[87] === 1)//w is pressed
        {
            var moved = 1;
            for(var i = 0; i<walls.length; i++)
            {
                if(moved === 1)
                {
                    if(PC[0].x > walls[i].x-20 && PC[0].x < walls[i].x+20)
                    {
                        if(PC[0].y-20 === walls[i].y)
                        {
                            moved = 0;
                        }
                    }
                }
            }
            if(moved === 1)
            {
                PC[0].y = PC[0].y - 4;
            }
        }
        else if(keyArray[83] === 1)//s is pressed
        {
            var moved = 1;
            for(var i = 0; i<walls.length; i++)
            {
                if(moved === 1)
                {
                    if(PC[0].x > walls[i].x-20 && PC[0].x < walls[i].x+20)
                    {
                        if(PC[0].y+20 === walls[i].y)
                        {
                            moved = 0;
                        }
                    }
                }
            }
            if(moved === 1)
            {
                PC[0].y = PC[0].y + 4;
            }
        }
        
        if(keyArray[65] === 1)//a is pressed
        {
            var moved = 1;
            for(var i = 0; i<walls.length; i++)
            {
                if(moved === 1)
                {
                    if(PC[0].y > walls[i].y-20 && PC[0].y < walls[i].y+20)
                    {
                        if(PC[0].x-20 === walls[i].x)
                        {
                            moved = 0;
                        }
                    }
                }
            }
            if(moved === 1)
            {
                PC[0].x = PC[0].x - 4;
            }
        }
        else if(keyArray[68] === 1)//d is pressed
        {
            var moved = 1;
            for(var i = 0; i<walls.length; i++)
            {
                if(moved === 1)
                {
                    if(PC[0].y > walls[i].y-20 && PC[0].y < walls[i].y+20)
                    {
                        if(PC[0].x+20 === walls[i].x)
                        {
                            moved = 0;
                        }
                    }
                }
            }
            if(moved === 1)
            {
                PC[0].x = PC[0].x + 4;
            }
        }
        
        //Draws any visible ie not collected chips, updates the number of collectibles left for victory purposes
        for (var i=0; i<chips.length; i++)
        {
            if(PC[0].x < chips[i].x+16 && PC[0].x > chips[i].x-16 &&
               PC[0].y < chips[i].y+16 && PC[0].y > chips[i].y-16 &&
               chips[i].visible === 1)
            {
                chips[i].visible = 0;
                collectibles = collectibles - 1;
            }
        }
        
        //Draws any visible ie not collected powerups, empowers the PC
        for (var i=0; i<powerups.length; i++)
        {
            if(PC[0].x < powerups[i].x+16 && PC[0].x > powerups[i].x-16 &&
               PC[0].y < powerups[i].y+16 && PC[0].y > powerups[i].y-16 &&
               powerups[i].visible === 1)
            {
                PC[0].powered = 1;
                PC[0].power_timer = frameCount;
                powerups[i].visible = 0;
            }
        }
        
        //Checks timer on power up state
        if(PC[0].power_timer < (frameCount - 240))
        {
            PC[0].powered = 0;
        }
        
        //Enemy movement
        for(var i=0; i<enemies.length; i++)
        {
            var x_dist = 0;
            var y_dist = 0;
            x_dist = enemies[i].x - PC[0].x;
            y_dist = enemies[i].y - PC[0].y;
            if (abs(x_dist) < 140 && abs(y_dist) < 140 && enemies[i].currFrameCountEnemy < (frameCount - 4))
            {
                enemies[i].currFrameCountEnemy = frameCount;
                var e_move_up = 1;
                var e_move_down = 1;
                var e_move_left = 1;
                var e_move_right = 1;
                for(var j = 0; j < walls.length; j++)
                {
                    //down and right goofed
                    if(enemies[i].y < walls[j].y+20 && enemies[i].y > walls[j].y-20)
                    {
                        if(enemies[i].x+enemies[i].speed+20 <= walls[j].x+20 &&
                        enemies[i].x+enemies[i].speed+20 >= walls[j].x)//check movement right
                        {
                            e_move_right = 0;
                        }
                        if(enemies[i].x-enemies[i].speed <= walls[j].x+20 &&
                        enemies[i].x-enemies[i].speed >= walls[j].x)//check movement left
                        {
                            e_move_left = 0;
                        }
                    }
                    
                    if(enemies[i].x < walls[j].x+20 && enemies[i].x-20 > walls[j].x-20)
                    {
                        if(enemies[i].y-enemies[i].speed <= walls[j].y+20 &&
                        enemies[i].y-enemies[i].speed >= walls[j].y)//check movement up
                        {
                            e_move_up = 0;
                        }
                        if(enemies[i].y+enemies[i].speed+20 <= walls[j].y+20 &&
                        enemies[i].y+enemies[i].speed+20 >= walls[j].y)//check movement down
                        {
                            e_move_down = 0;
                        }
                    }
                }
                
                //All directions are reversed if the player is powered up
                if(x_dist < 0)//if negative, needs to move right
                {   
                    if(PC[0].powered === 0)
                    {
                        if(e_move_right === 1)
                        {
                            enemies[i].x += enemies[i].speed;    
                        }
                    }
                    else
                    {
                        if(e_move_left === 1)
                        {
                            enemies[i].x -= enemies[i].speed;    
                        }
                    }
                }
                else if(x_dist > 0)//if positive, needs to move left
                {
                    if(PC[0].powered === 0)
                    {
                        if(e_move_left === 1)
                        {
                            enemies[i].x -= enemies[i].speed;    
                        }    
                    }
                    else
                    {
                        if(e_move_right === 1)
                        {
                            enemies[i].x += enemies[i].speed;    
                        }    
                    }
                }
                
                if(y_dist > 0)//if postive, needs to move up
                {
                    if(PC[0].powered === 0)
                    {
                        if(e_move_up === 1)
                        {
                            enemies[i].y -= enemies[i].speed;    
                        }
                    }
                    else
                    {
                        if(e_move_down === 1)
                        {
                            enemies[i].y += enemies[i].speed;    
                        }
                    }
                }
                else if(y_dist < 0)//if negative, needs to move down
                {
                    if(PC[0].powered === 0)
                    {
                        if(e_move_down === 1)
                        {
                            enemies[i].y += enemies[i].speed;    
                        }  
                    }
                    else
                    {
                        if(e_move_up === 1)
                        {
                            enemies[i].y -= enemies[i].speed;    
                        }   
                    }
                }
            }
            
        }
        background(0, 0, 0);
        pushMatrix();
        translate(-PC[0].x+200, -PC[0].y+200);
        //Draws the walls, any collectibles that haven't been picked up yet, the player character, and the enemy
        for (var i=0; i<walls.length; i++)
        {
            walls[i].draw();
        }
        for (i=0; i<chips.length; i++)
        {
            if(chips[i].visible === 1)
            {
                chips[i].draw();
            }
        }
        for (i=0; i<powerups.length; i++)
        {
            if(powerups[i].visible === 1)
            {
                powerups[i].draw();
            }
        }
        PC[0].draw();
        for (i=0; i<enemies.length; i++)
        {
            enemies[i].draw();
        }
        
        if(collectibles === 0)//If no more collectables, then the player has won
        {
            screen_state = 2;
        }
        popMatrix();
        
        if(screen_state !== 2)//Checks if the monster has hit an unpowered player
        {
            for(var i = 0; i<enemies.length; i++)
            {
                
                if(PC[0].x < enemies[i].x+12 && PC[0].x > enemies[i].x-12 &&
                   PC[0].y < enemies[i].y+12 && PC[0].y > enemies[i].y-12 &&
                   PC[0].powered === 0)
                {
                    screen_state = 3;
                }
            }
        }
        
        if(screen_state === 2)//Victory screen
        {
            fill(255, 255, 255, 150);
            rect(0, 0, 400, 400);
            fill(0, 0, 0);
            text("You win!\n   :D", 140, 180);
        }
           
        if(screen_state === 3)//Defeat screen
        {
            fill(0, 0, 0, 150);
            rect(0, 0, 400, 400);
            fill(255, 255, 255);
            text("Game Over\n    :(", 140, 180);
        }
    }
};